<?php

/**
 * TblUserTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TblUserTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object TblUserTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('TblUser');
  }

  public function getUserByEmail($email)
  {
    return $this->createQuery('a')
      ->where('a.email = ?', $email)
      ->andWhere('a.status = 1')
      ->fetchOne();
  }

  public function updatePassword($vtUser, $password)
  {
    try {
      $vtUser->setPassword(sha1($vtUser->getSalt() . $password));
      $vtUser->save();
    } catch (Exception $e) {
      throw new Exception('Cannot update user password: ' . $e->getMessage());
    }
  }

  public function updateUserLock($email, $time_now) {
    return $this->createQuery('a')
      ->update()
      ->set('a.is_lock', '?', true)
      ->set('a.lock_time', '?', $time_now)
      ->where('a.email = ?', $email)
      ->execute();
  }

  public function updateStatus($userId, $status) {
    return $this->createQuery('a')
      ->update()
      ->set('a.message', '?', $status)
      ->where('a.id = ?', $userId)
      ->execute();
  }

  public function deleteStatus($userId) {
    return $this->createQuery('a')
      ->update()
      ->set('a.message', '?', array(null))
      ->where('a.id = ?', $userId)
      ->execute();
  }

  public function getUserByPhone($number)
  {
    return $this->createQuery('a')
      ->where('a.msisdn = ?', $number)
      ->andWhere('a.status = 1')
      ->fetchOne();
  }

  public function getListUserByTypeQuery($schoolId,$classId = null,$type = null,$keyword = null,$page = 1,$pageSize = -1){
    $query = $this->createQuery('t')
      ->leftJoin('t.TblClass c')
      ->leftJoin('c.TblGroup g')
      ->where('g.school_id = ?', $schoolId)
      ->andWhere('t.is_delete = 0');
    if($classId)
      $query->andWhere('c.id = ?', $classId);
    if($keyword)
      $query->andWhere('(t.name like ? OR t.description like ?)', ['%'.VtHelper::translateQuery($keyword).'%','%'.VtHelper::translateQuery($keyword).'%']);
    if($type)
      $query->andWhere('type = ?', $type);
    if($pageSize > 0){
      $query->limit($pageSize)
        ->offset(($page-1)*$pageSize);
    }
    return $query;
  }

  public function getListUserByType($schoolId,$classId,$type,$keyword,$page,$pageSize){

    return $this->getListUserByTypeQuery($schoolId,$classId,$type,$keyword,$page,$pageSize)->fetchArray();
  }

  public function getUserById($id,$schoolId,$type){
    return $this->getListUserByTypeQuery($schoolId,null,$type)
      ->andWhere('t.id = ?', $id)
      ->fetchOne();
  }

  public function getListParent(){
    return $this->createQuery('u')
      ->where('status = 1')
      ->andWhere('is_delete = 0')
      ->andWhere('type = ?', UserTypeEnum::PARENTS);
  }

  public function getActiveQuery($alias)
  {
    return $this->createQuery($alias)
      ->where($alias . '.status = 1')
      ->andWhere($alias . '.is_delete = 0');
  }

  public function getActiveUserById($id) {
    return $this->getActiveQuery('a')
      ->andWhere('a.id = ?', $id)
      ->fetchOne();
  }

  public function getParentInSchoolById($id,$schoolId){
    return $this->getListParent()
      ->innerJoin('u.TblUserSchoolRef r')
      ->andWhere('r.school_id = ?', $schoolId)
      ->andWhere('id = ?', $id)
      ->fetchOne();
  }

  public function getListParentQuery($schoolId,$classId = null, $memberId = null, $keyword = null,$page = 1,$pageSize = -1){
    $query = $this->createQuery('u')
      ->innerJoin('u.TblUserSchoolRef r')
      ->leftJoin('u.TblMember m')
      ->leftJoin('m.TblClass c')
      ->where('r.school_id = ?', $schoolId)
      ->andWhere('u.is_delete = 0')
      ->andWhere('type = ?', UserTypeEnum::PARENTS);
    if($classId)
      $query->andWhere('m.class_id = ?', $classId);
    if($memberId)
      $query->andWhere('m.id = ?', $memberId);
    if($keyword)
      $query->andWhere('(u.name like ? OR u.description like ?)', ['%'.VtHelper::translateQuery($keyword).'%','%'.VtHelper::translateQuery($keyword).'%']);
    if($pageSize > 0 && $page > 0){
      $query->limit($pageSize)
        ->offset(($page-1)*$pageSize);
    }
    return $query;
  }

  public function getListParentByParam($schoolId,$classId,$memberId,$keyword,$page,$pageSize){

    return $this->getListParentQuery($schoolId,$classId,$memberId,$keyword,$page,$pageSize)->fetchArray();
  }

  public function setUnLockUser($account)
  {
    return $this->createQuery('a')
      ->update()
      ->set('a.is_lock', '?', false)
      ->set('a.lock_time', '?', array(null))
      ->where('a.email = ?', $account)
      ->execute();
  }

  public function checkUserCredentials($schoolIds)
  {
    return $this->getActiveQuery('a')
      ->leftJoin('a.TblUserSchoolRef r')
      ->andWhereIn('r.id', $schoolIds)
      ->count();
  }
}